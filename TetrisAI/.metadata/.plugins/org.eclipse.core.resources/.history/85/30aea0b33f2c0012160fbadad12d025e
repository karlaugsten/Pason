package integration;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import tetrisconnector.CommandChannel;
import tetrisconnector.Response;
import tetrisconnector.BoardStateResp;

public class Communicator {
	
	private Lock lock = new ReentrantLock();
	
	private int[] boardstate = new int[20];
	private int[] oppboardstate = new int[20];
	
	private CommandChannel sender;
	
	public Communicator(CommandChannel channel){
		sender = channel;
		
	}
	
	public void putResponse(Response r){
		if(r instanceof BoardStateResp){
			//here we should check if they are different, and if true update;
			updateBoardState((BoardStateResp) r);
		}
	}
	
	public void updateBoardState(BoardStateResp b){
		lock.lock();
		String ourboard = b.getBoardState();
		String theirboard = b.getOppBoardState();
		boolean shift = true;
		int mask = 0x3FF;
		for(int i = 0; i < 20; i++){
			String row = ourboard.substring(2*i,2*(i+1)+1);
			String opprow = theirboard.substring(2*i,2*(i+1)+1);
			if(shift){
				boardstate[i] = ((int)Integer.parseInt(row,16)) >> 2;
				oppboardstate[i] = ((int)Integer.parseInt(opprow,16)) >> 2;
				shift = false;
			}else{
				boardstate[i] = ((int)Integer.parseInt(row,16));
				oppboardstate[i] = ((int)Integer.parseInt(opprow,16));
				boardstate[i] &= mask;
				oppboardstate[i] &= mask;
			}
		}
		lock.unlock();
	}

}
