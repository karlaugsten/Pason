package game;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.zeromq.ZMQ;

public class CommandChannel implements Runnable{
	
	private ZMQ.Context context;
	private ZMQ.Socket channel;
	private Queue<Command> queue;
	private Lock qMutex;
	private Condition empty;
	
	public CommandChannel(ZMQ.Context c){
		context = c;
		channel = context.socket(ZMQ.REQ);
		queue = new LinkedList<Command>();
		qMutex = new ReentrantLock();
		empty = qMutex.newCondition();
	}
	
	/**
	 * Starts this channel and connects to the specified url
	 * @param url The url of the server to connect to.
	 * @return True if the connection was successful.
	 */
	public boolean invoke(String url){
		channel.connect("tcp://"+url+":5557");
		(new Thread(this)).start();
		return true;
	}
	
	/**
	 * This will be the command channel thread running constantly posting commands... etc
	 */
	@Override
	public void run() {
		while(true){
			qMutex.lock();
			if(queue.isEmpty()){
				try {
					empty.await();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			for(Command c : queue){
				channel.send(c.getBytes(),0);
			}
			
			qMutex.unlock();
		}
		
	}
	
	/**
	 * This method will queue a command to send to the server, it also 
	 * will signal this thread if the queue was empty.
	 * @param c The command to be queued.
	 */
	public void queueCommand(Command c){
		qMutex.lock();
		queue.add(c);
		empty.signal();
		qMutex.unlock();
		
	}
	
}
